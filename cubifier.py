#!/usr/bin/env python

"""
# CubePostprocessor

Just a post processor make life easier with Cube 2 from 3DSystems.

Support KISSlicer 1.5b, Cura 15.04.04 and Slic3r 1.2.9.

With all slicer g-code, it cleans the file after processing (removes comments and extra lines, makes sure EOL is Windows)

With KISS
 - allows for solid and infill extrusion amount tuning

With Cura
 - change first layer temp 10 C higher than rest of the print

With Slicer
 - converts Makerware (Makerbot) style g-code to Cube (BfB) format

Disclaimer: i'm not responsible if anything, good or bad, happens due to use of this script.

Version 0.7
"""


import logging
import math
import re
import os
import statistics
import sys

from slicer_cura import CuraPrintFile
from slicer_kisslicer import KissPrintFile
from slicer_simplify3d import Simplify3dPrintFile
from slicer_slic3r import Slic3rPrintFile

fmt = logging.Formatter(fmt="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
filehandler = logging.FileHandler("process.log")
filehandler.setFormatter(fmt)
streamhandler = logging.StreamHandler(stream=sys.stdout)
streamhandler.setFormatter(fmt)
log = logging.getLogger("Cubifier")
log.setLevel(logging.INFO)
log.addHandler(filehandler)
log.addHandler(streamhandler)


def detect_file_type(gcode_file):
    with open(gcode_file, 'r') as gf:
        line1 = gf.readline()
        if line1.startswith('; KISSlicer'):
            log.info("Detected KISSlicer format")
            return KissPrintFile
        elif line1.startswith('; CURA'):
            log.info("Detected Cura format")
            return CuraPrintFile
        elif line1.startswith('; generated by Slic3r'):
            log.info("Detected Slic3r format")
            return Slic3rPrintFile
        elif line1.startswith('; G-Code generated by Simplify3D(R)'):
            log.info("Detected Simplify3D format")
            return Simplify3dPrintFile
        else:
            log.error("No supported gcode file detected. Is comments enabled on Kisslicer or '; CURA' header added to Cura start.gcode?")
            exit(1)

if __name__ == "__main__":
    debug = False
    if len(sys.argv) < 2:
        log.error("Need argument for file to process")
        exit(1)
    if len(sys.argv) == 3 and sys.argv[2] == "--debug":
        debug = True

    print_type = detect_file_type(sys.argv[1])
    pf = print_type(debug=debug)
    pf.process(sys.argv[1])
